using System ; using System . Collections . Generic ; using System . Runtime . InteropServices ; using System . Text ; internal unsafe static partial class __bindings { [ DllImport ( "mahjong" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_drop_vec_u8 ( RawVec raw ) ; [ DllImport ( "mahjong" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_drop_vec_i8 ( RawVec raw ) ; [ DllImport ( "mahjong" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_drop_vec_u16 ( RawVec raw ) ; [ DllImport ( "mahjong" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_drop_vec_i16 ( RawVec raw ) ; [ DllImport ( "mahjong" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_drop_vec_u32 ( RawVec raw ) ; [ DllImport ( "mahjong" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_drop_vec_i32 ( RawVec raw ) ; [ DllImport ( "mahjong" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_drop_vec_u64 ( RawVec raw ) ; [ DllImport ( "mahjong" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_drop_vec_i64 ( RawVec raw ) ; [ DllImport ( "mahjong" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_drop_vec_usize ( RawVec raw ) ; [ DllImport ( "mahjong" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_drop_vec_isize ( RawVec raw ) ; [ DllImport ( "mahjong" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_drop_vec_f32 ( RawVec raw ) ; [ DllImport ( "mahjong" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_drop_vec_f64 ( RawVec raw ) ; [ DllImport ( "mahjong" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_drop_vec_bool ( RawVec raw ) ; [ DllImport ( "mahjong" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_drop_vec_char ( RawVec raw ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_string_from_utf16" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern RawVec __cs_bindgen_string_from_utf16 ( RawSlice raw ) ; internal static void __FromRaw ( byte raw , out byte result ) { result = raw ; } internal static void __FromRaw ( sbyte raw , out sbyte result ) { result = raw ; } internal static void __FromRaw ( short raw , out short result ) { result = raw ; } internal static void __FromRaw ( ushort raw , out ushort result ) { result = raw ; } internal static void __FromRaw ( int raw , out int result ) { result = raw ; } internal static void __FromRaw ( uint raw , out uint result ) { result = raw ; } internal static void __FromRaw ( long raw , out long result ) { result = raw ; } internal static void __FromRaw ( ulong raw , out ulong result ) { result = raw ; } internal static void __FromRaw ( float raw , out float result ) { result = raw ; } internal static void __FromRaw ( double raw , out double result ) { result = raw ; } internal static void __FromRaw ( byte raw , out bool result ) { result = raw != 0 ; } internal static void __FromRaw ( RawVec raw , out string result ) { result = Encoding . UTF8 . GetString ( ( byte * ) raw . Ptr , ( int ) raw . Length ) ; __bindings . __cs_bindgen_drop_vec_u8 ( raw ) ; } internal static void __FromRaw ( RawVec raw , out List < byte > result ) { result = raw . ToPrimitiveList < byte > ( ) ; __bindings . __cs_bindgen_drop_vec_u8 ( raw ) ; } internal static void __FromRaw ( RawVec raw , out List < sbyte > result ) { result = raw . ToPrimitiveList < sbyte > ( ) ; __bindings . __cs_bindgen_drop_vec_i8 ( raw ) ; } internal static void __FromRaw ( RawVec raw , out List < short > result ) { result = raw . ToPrimitiveList < short > ( ) ; __bindings . __cs_bindgen_drop_vec_i16 ( raw ) ; } internal static void __FromRaw ( RawVec raw , out List < ushort > result ) { result = raw . ToPrimitiveList < ushort > ( ) ; __bindings . __cs_bindgen_drop_vec_u16 ( raw ) ; } internal static void __FromRaw ( RawVec raw , out List < int > result ) { result = raw . ToPrimitiveList < int > ( ) ; __bindings . __cs_bindgen_drop_vec_i32 ( raw ) ; } internal static void __FromRaw ( RawVec raw , out List < uint > result ) { result = raw . ToPrimitiveList < uint > ( ) ; __bindings . __cs_bindgen_drop_vec_u32 ( raw ) ; } internal static void __FromRaw ( RawVec raw , out List < long > result ) { result = raw . ToPrimitiveList < long > ( ) ; __bindings . __cs_bindgen_drop_vec_i64 ( raw ) ; } internal static void __FromRaw ( RawVec raw , out List < ulong > result ) { result = raw . ToPrimitiveList < ulong > ( ) ; __bindings . __cs_bindgen_drop_vec_u64 ( raw ) ; } internal static void __FromRaw ( RawVec raw , out List < float > result ) { result = raw . ToPrimitiveList < float > ( ) ; __bindings . __cs_bindgen_drop_vec_f32 ( raw ) ; } internal static void __FromRaw ( RawVec raw , out List < double > result ) { result = raw . ToPrimitiveList < double > ( ) ; __bindings . __cs_bindgen_drop_vec_f32 ( raw ) ; } internal static void __FromRaw ( RawVec raw , out List < bool > result ) { result = raw . ToPrimitiveList < byte , bool > ( rawElem => rawElem != 0 ) ; __bindings . __cs_bindgen_drop_vec_u8 ( raw ) ; } internal static void __IntoRaw ( byte value , out byte result ) { result = value ; } internal static void __IntoRaw ( sbyte value , out sbyte result ) { result = value ; } internal static void __IntoRaw ( short value , out short result ) { result = value ; } internal static void __IntoRaw ( ushort value , out ushort result ) { result = value ; } internal static void __IntoRaw ( int value , out int result ) { result = value ; } internal static void __IntoRaw ( uint value , out uint result ) { result = value ; } internal static void __IntoRaw ( long value , out long result ) { result = value ; } internal static void __IntoRaw ( ulong value , out ulong result ) { result = value ; } internal static void __IntoRaw ( float value , out float result ) { result = value ; } internal static void __IntoRaw ( double value , out double result ) { result = value ; } internal static void __IntoRaw ( bool value , out byte result ) { result = value ? ( byte ) 1 : ( byte ) 0 ; } internal static void __IntoRaw ( string value , out RawVec result ) { fixed ( char * charPtr = value ) { result = __cs_bindgen_string_from_utf16 ( new RawSlice ( ( IntPtr ) charPtr , value . Length ) ) ; } } } internal unsafe static partial class __bindings { [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_index_ClientState" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern IntPtr __cs_bindgen_generated_index_ClientState ( RawSlice slice , UIntPtr index ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_drop_vec_ClientState" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_generated_drop_vec_ClientState ( RawVec vec ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_drop__ClientState" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_drop__ClientState ( IntPtr self ) ; internal static void __FromRaw ( RawVec raw , out List < global :: ClientState > result ) { result = raw . ToList < IntPtr , global :: ClientState > ( __cs_bindgen_generated_index_ClientState , __FromRaw ) ; __cs_bindgen_generated_drop_vec_ClientState ( raw ) ; } [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated__new__ClientState" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern IntPtr __cs_bindgen_generated__new__ClientState ( ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated__set_credentials__ClientState" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_generated__set_credentials__ClientState ( IntPtr self , ulong id , RawVec token ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated__create_handshake_request__ClientState" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern RawVec __cs_bindgen_generated__create_handshake_request__ClientState ( IntPtr self ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated__handle_handshake_response__ClientState" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern byte __cs_bindgen_generated__handle_handshake_response__ClientState ( IntPtr self , RawVec json ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated__create_start_match_request__ClientState" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern RawVec __cs_bindgen_generated__create_start_match_request__ClientState ( IntPtr self ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated__handle_start_match_response__ClientState" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern IntPtr __cs_bindgen_generated__handle_start_match_response__ClientState ( IntPtr self , RawVec response ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated__account_id__ClientState" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern global :: __AccountId__Raw __cs_bindgen_generated__account_id__ClientState ( IntPtr self ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated__points__ClientState" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern ulong __cs_bindgen_generated__points__ClientState ( IntPtr self ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_index_Tile" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern global :: __Tile__Raw __cs_bindgen_generated_index_Tile ( RawSlice slice , UIntPtr index ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_drop_vec_Tile" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_generated_drop_vec_Tile ( RawVec vec ) ; internal static void __FromRaw ( RawVec raw , out List < global :: ITile > result ) { result = raw . ToList < global :: __Tile__Raw , global :: ITile > ( __cs_bindgen_generated_index_Tile , __FromRaw ) ; __cs_bindgen_generated_drop_vec_Tile ( raw ) ; } [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_index_Suit" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern IntPtr __cs_bindgen_generated_index_Suit ( RawSlice slice , UIntPtr index ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_drop_vec_Suit" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_generated_drop_vec_Suit ( RawVec vec ) ; internal static void __FromRaw ( RawVec raw , out List < global :: Suit > result ) { result = raw . ToList < IntPtr , global :: Suit > ( __cs_bindgen_generated_index_Suit , __FromRaw ) ; __cs_bindgen_generated_drop_vec_Suit ( raw ) ; } [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_index_SimpleTile" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern global :: __SimpleTile__Raw __cs_bindgen_generated_index_SimpleTile ( RawSlice slice , UIntPtr index ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_drop_vec_SimpleTile" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_generated_drop_vec_SimpleTile ( RawVec vec ) ; internal static void __FromRaw ( RawVec raw , out List < global :: SimpleTile > result ) { result = raw . ToList < global :: __SimpleTile__Raw , global :: SimpleTile > ( __cs_bindgen_generated_index_SimpleTile , __FromRaw ) ; __cs_bindgen_generated_drop_vec_SimpleTile ( raw ) ; } [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_index_HonorTile" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern global :: __HonorTile__Raw __cs_bindgen_generated_index_HonorTile ( RawSlice slice , UIntPtr index ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_drop_vec_HonorTile" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_generated_drop_vec_HonorTile ( RawVec vec ) ; internal static void __FromRaw ( RawVec raw , out List < global :: IHonorTile > result ) { result = raw . ToList < global :: __HonorTile__Raw , global :: IHonorTile > ( __cs_bindgen_generated_index_HonorTile , __FromRaw ) ; __cs_bindgen_generated_drop_vec_HonorTile ( raw ) ; } [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_index_Wind" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern IntPtr __cs_bindgen_generated_index_Wind ( RawSlice slice , UIntPtr index ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_drop_vec_Wind" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_generated_drop_vec_Wind ( RawVec vec ) ; internal static void __FromRaw ( RawVec raw , out List < global :: Wind > result ) { result = raw . ToList < IntPtr , global :: Wind > ( __cs_bindgen_generated_index_Wind , __FromRaw ) ; __cs_bindgen_generated_drop_vec_Wind ( raw ) ; } [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_index_Dragon" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern IntPtr __cs_bindgen_generated_index_Dragon ( RawSlice slice , UIntPtr index ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_drop_vec_Dragon" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_generated_drop_vec_Dragon ( RawVec vec ) ; internal static void __FromRaw ( RawVec raw , out List < global :: Dragon > result ) { result = raw . ToList < IntPtr , global :: Dragon > ( __cs_bindgen_generated_index_Dragon , __FromRaw ) ; __cs_bindgen_generated_drop_vec_Dragon ( raw ) ; } [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_index_TileId" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern global :: __TileId__Raw __cs_bindgen_generated_index_TileId ( RawSlice slice , UIntPtr index ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_drop_vec_TileId" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_generated_drop_vec_TileId ( RawVec vec ) ; internal static void __FromRaw ( RawVec raw , out List < global :: TileId > result ) { result = raw . ToList < global :: __TileId__Raw , global :: TileId > ( __cs_bindgen_generated_index_TileId , __FromRaw ) ; __cs_bindgen_generated_drop_vec_TileId ( raw ) ; } [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_index_TileInstance" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern global :: __TileInstance__Raw __cs_bindgen_generated_index_TileInstance ( RawSlice slice , UIntPtr index ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_drop_vec_TileInstance" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_generated_drop_vec_TileInstance ( RawVec vec ) ; internal static void __FromRaw ( RawVec raw , out List < global :: TileInstance > result ) { result = raw . ToList < global :: __TileInstance__Raw , global :: TileInstance > ( __cs_bindgen_generated_index_TileInstance , __FromRaw ) ; __cs_bindgen_generated_drop_vec_TileInstance ( raw ) ; } [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_index_Hand" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern IntPtr __cs_bindgen_generated_index_Hand ( RawSlice slice , UIntPtr index ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_drop_vec_Hand" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_generated_drop_vec_Hand ( RawVec vec ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_drop__Hand" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_drop__Hand ( IntPtr self ) ; internal static void __FromRaw ( RawVec raw , out List < global :: Hand > result ) { result = raw . ToList < IntPtr , global :: Hand > ( __cs_bindgen_generated_index_Hand , __FromRaw ) ; __cs_bindgen_generated_drop_vec_Hand ( raw ) ; } [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_index_Call" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern global :: __Call__Raw __cs_bindgen_generated_index_Call ( RawSlice slice , UIntPtr index ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_drop_vec_Call" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_generated_drop_vec_Call ( RawVec vec ) ; internal static void __FromRaw ( RawVec raw , out List < global :: ICall > result ) { result = raw . ToList < global :: __Call__Raw , global :: ICall > ( __cs_bindgen_generated_index_Call , __FromRaw ) ; __cs_bindgen_generated_drop_vec_Call ( raw ) ; } [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_index_MatchState" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern IntPtr __cs_bindgen_generated_index_MatchState ( RawSlice slice , UIntPtr index ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_drop_vec_MatchState" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_generated_drop_vec_MatchState ( RawVec vec ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_drop__MatchState" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_drop__MatchState ( IntPtr self ) ; internal static void __FromRaw ( RawVec raw , out List < global :: MatchState > result ) { result = raw . ToList < IntPtr , global :: MatchState > ( __cs_bindgen_generated_index_MatchState , __FromRaw ) ; __cs_bindgen_generated_drop_vec_MatchState ( raw ) ; } [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated__id__MatchState" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern global :: __MatchId__Raw __cs_bindgen_generated__id__MatchState ( IntPtr self ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated__current_turn__MatchState" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern IntPtr __cs_bindgen_generated__current_turn__MatchState ( IntPtr self ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated__player_hand__MatchState" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern RawVec __cs_bindgen_generated__player_hand__MatchState ( IntPtr self , IntPtr seat ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated__player_has_current_draw__MatchState" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern byte __cs_bindgen_generated__player_has_current_draw__MatchState ( IntPtr self , IntPtr seat ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated__current_draw__MatchState" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern global :: __TileInstance__Raw __cs_bindgen_generated__current_draw__MatchState ( IntPtr self , IntPtr seat ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated__try_discard_tile__MatchState" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern byte __cs_bindgen_generated__try_discard_tile__MatchState ( IntPtr self , IntPtr seat , global :: __TileId__Raw tile ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated__try_draw_tile__MatchState" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern byte __cs_bindgen_generated__try_draw_tile__MatchState ( IntPtr self , IntPtr seat ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated__request_discard_tile__MatchState" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern RawVec __cs_bindgen_generated__request_discard_tile__MatchState ( IntPtr self , IntPtr player , global :: __TileId__Raw tile ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated__handle_event__MatchState" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern global :: __MatchEvent__Raw __cs_bindgen_generated__handle_event__MatchState ( IntPtr self , RawVec json ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_index_MatchId" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern global :: __MatchId__Raw __cs_bindgen_generated_index_MatchId ( RawSlice slice , UIntPtr index ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_drop_vec_MatchId" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_generated_drop_vec_MatchId ( RawVec vec ) ; internal static void __FromRaw ( RawVec raw , out List < global :: MatchId > result ) { result = raw . ToList < global :: __MatchId__Raw , global :: MatchId > ( __cs_bindgen_generated_index_MatchId , __FromRaw ) ; __cs_bindgen_generated_drop_vec_MatchId ( raw ) ; } [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_index_AccountId" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern global :: __AccountId__Raw __cs_bindgen_generated_index_AccountId ( RawSlice slice , UIntPtr index ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_drop_vec_AccountId" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_generated_drop_vec_AccountId ( RawVec vec ) ; internal static void __FromRaw ( RawVec raw , out List < global :: AccountId > result ) { result = raw . ToList < global :: __AccountId__Raw , global :: AccountId > ( __cs_bindgen_generated_index_AccountId , __FromRaw ) ; __cs_bindgen_generated_drop_vec_AccountId ( raw ) ; } [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_index_SessionId" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern global :: __SessionId__Raw __cs_bindgen_generated_index_SessionId ( RawSlice slice , UIntPtr index ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_drop_vec_SessionId" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_generated_drop_vec_SessionId ( RawVec vec ) ; internal static void __FromRaw ( RawVec raw , out List < global :: SessionId > result ) { result = raw . ToList < global :: __SessionId__Raw , global :: SessionId > ( __cs_bindgen_generated_index_SessionId , __FromRaw ) ; __cs_bindgen_generated_drop_vec_SessionId ( raw ) ; } [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_index_PlayerState" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern IntPtr __cs_bindgen_generated_index_PlayerState ( RawSlice slice , UIntPtr index ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_drop_vec_PlayerState" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_generated_drop_vec_PlayerState ( RawVec vec ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_drop__PlayerState" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_drop__PlayerState ( IntPtr self ) ; internal static void __FromRaw ( RawVec raw , out List < global :: PlayerState > result ) { result = raw . ToList < IntPtr , global :: PlayerState > ( __cs_bindgen_generated_index_PlayerState , __FromRaw ) ; __cs_bindgen_generated_drop_vec_PlayerState ( raw ) ; } [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_index_Credentials" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern IntPtr __cs_bindgen_generated_index_Credentials ( RawSlice slice , UIntPtr index ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_drop_vec_Credentials" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_generated_drop_vec_Credentials ( RawVec vec ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_drop__Credentials" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_drop__Credentials ( IntPtr self ) ; internal static void __FromRaw ( RawVec raw , out List < global :: Credentials > result ) { result = raw . ToList < IntPtr , global :: Credentials > ( __cs_bindgen_generated_index_Credentials , __FromRaw ) ; __cs_bindgen_generated_drop_vec_Credentials ( raw ) ; } [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_index_MatchEvent" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern global :: __MatchEvent__Raw __cs_bindgen_generated_index_MatchEvent ( RawSlice slice , UIntPtr index ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated_drop_vec_MatchEvent" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_generated_drop_vec_MatchEvent ( RawVec vec ) ; internal static void __FromRaw ( RawVec raw , out List < global :: IMatchEvent > result ) { result = raw . ToList < global :: __MatchEvent__Raw , global :: IMatchEvent > ( __cs_bindgen_generated_index_MatchEvent , __FromRaw ) ; __cs_bindgen_generated_drop_vec_MatchEvent ( raw ) ; } } public class Mahjong { } public unsafe partial class ClientState : IDisposable { internal IntPtr _handle ; internal ClientState ( IntPtr raw ) { _handle = raw ; } public void Dispose ( ) { if ( _handle != IntPtr . Zero ) { __bindings . __cs_bindgen_drop__ClientState ( _handle ) ; _handle = IntPtr . Zero ; } } } internal unsafe static partial class __bindings { internal static void __FromRaw ( IntPtr raw , out ClientState result ) { result = new ClientState ( raw ) ; } internal static void __IntoRaw ( ClientState value , out IntPtr result ) { result = value . _handle ; } } partial class ClientState { public ClientState ( ) { unsafe { this . _handle = __bindings . __cs_bindgen_generated__new__ClientState ( ) ; } } } partial class ClientState { public void SetCredentials ( ulong id , string token ) { unsafe { fixed ( char * __fixed_token = token ) { __bindings . __IntoRaw ( id , out ulong __id ) ; __bindings . __IntoRaw ( token , out RawVec __token ) ; __bindings . __cs_bindgen_generated__set_credentials__ClientState ( this . _handle , __id , __token ) ; } } } } partial class ClientState { public string CreateHandshakeRequest ( ) { unsafe { RawVec __raw_result ; __raw_result = __bindings . __cs_bindgen_generated__create_handshake_request__ClientState ( this . _handle ) ; __bindings . __FromRaw ( __raw_result , out string __result ) ; return __result ; } } } partial class ClientState { public bool HandleHandshakeResponse ( string json ) { unsafe { byte __raw_result ; fixed ( char * __fixed_json = json ) { __bindings . __IntoRaw ( json , out RawVec __json ) ; __raw_result = __bindings . __cs_bindgen_generated__handle_handshake_response__ClientState ( this . _handle , __json ) ; } __bindings . __FromRaw ( __raw_result , out bool __result ) ; return __result ; } } } partial class ClientState { public string CreateStartMatchRequest ( ) { unsafe { RawVec __raw_result ; __raw_result = __bindings . __cs_bindgen_generated__create_start_match_request__ClientState ( this . _handle ) ; __bindings . __FromRaw ( __raw_result , out string __result ) ; return __result ; } } } partial class ClientState { public global :: MatchState HandleStartMatchResponse ( string response ) { unsafe { IntPtr __raw_result ; fixed ( char * __fixed_response = response ) { __bindings . __IntoRaw ( response , out RawVec __response ) ; __raw_result = __bindings . __cs_bindgen_generated__handle_start_match_response__ClientState ( this . _handle , __response ) ; } __bindings . __FromRaw ( __raw_result , out global :: MatchState __result ) ; return __result ; } } } partial class ClientState { public global :: AccountId AccountId ( ) { unsafe { global :: __AccountId__Raw __raw_result ; __raw_result = __bindings . __cs_bindgen_generated__account_id__ClientState ( this . _handle ) ; __bindings . __FromRaw ( __raw_result , out global :: AccountId __result ) ; return __result ; } } } partial class ClientState { public ulong Points ( ) { unsafe { ulong __raw_result ; __raw_result = __bindings . __cs_bindgen_generated__points__ClientState ( this . _handle ) ; __bindings . __FromRaw ( __raw_result , out ulong __result ) ; return __result ; } } } public interface ITile { } public static class Tile { public struct Simple : ITile { public global :: SimpleTile Element0 ; public Simple ( global :: SimpleTile element_0 ) { this . Element0 = element_0 ; } internal Simple ( __Simple__Raw raw ) { __bindings . __FromRaw ( raw . Element0 , out this . Element0 ) ; } } [ StructLayout ( LayoutKind . Sequential ) ] internal struct __Simple__Raw { internal global :: __SimpleTile__Raw Element0 ; public __Simple__Raw ( Simple value ) { __bindings . __IntoRaw ( value . Element0 , out this . Element0 ) ; } } public struct Wind : ITile { public global :: Wind Element0 ; public Wind ( global :: Wind element_0 ) { this . Element0 = element_0 ; } internal Wind ( __Wind__Raw raw ) { __bindings . __FromRaw ( raw . Element0 , out this . Element0 ) ; } } [ StructLayout ( LayoutKind . Sequential ) ] internal struct __Wind__Raw { internal IntPtr Element0 ; public __Wind__Raw ( Wind value ) { __bindings . __IntoRaw ( value . Element0 , out this . Element0 ) ; } } public struct Dragon : ITile { public global :: Dragon Element0 ; public Dragon ( global :: Dragon element_0 ) { this . Element0 = element_0 ; } internal Dragon ( __Dragon__Raw raw ) { __bindings . __FromRaw ( raw . Element0 , out this . Element0 ) ; } } [ StructLayout ( LayoutKind . Sequential ) ] internal struct __Dragon__Raw { internal IntPtr Element0 ; public __Dragon__Raw ( Dragon value ) { __bindings . __IntoRaw ( value . Element0 , out this . Element0 ) ; } } } [ StructLayout ( LayoutKind . Sequential ) ] internal unsafe struct __Tile__Raw { public IntPtr Discriminant ; public Tile_Data_Raw Value ; public __Tile__Raw ( int discriminant , Tile_Data_Raw value ) { this . Discriminant = new IntPtr ( discriminant ) ; this . Value = value ; } public __Tile__Raw ( long discriminant , Tile_Data_Raw value ) { this . Discriminant = new IntPtr ( discriminant ) ; this . Value = value ; } public __Tile__Raw ( IntPtr discriminant , Tile_Data_Raw value ) { this . Discriminant = discriminant ; this . Value = value ; } } [ StructLayout ( LayoutKind . Explicit ) ] internal struct Tile_Data_Raw { [ FieldOffset ( 0 ) ] internal Tile . __Simple__Raw Simple ; [ FieldOffset ( 0 ) ] internal Tile . __Wind__Raw Wind ; [ FieldOffset ( 0 ) ] internal Tile . __Dragon__Raw Dragon ; } internal unsafe static partial class __bindings { internal static void __FromRaw ( global :: __Tile__Raw raw , out ITile result ) { switch ( raw . Discriminant . ToInt64 ( ) ) { case 0 : { result = new global :: Tile . Simple ( raw . Value . Simple ) ; } break ; case 1 : { result = new global :: Tile . Wind ( raw . Value . Wind ) ; } break ; case 2 : { result = new global :: Tile . Dragon ( raw . Value . Dragon ) ; } break ; default : throw new Exception ( "Invalid discriminant " + raw . Discriminant ) ; } } internal static void __IntoRaw ( ITile value , out global :: __Tile__Raw result ) { switch ( value ) { case global :: Tile . Simple Simple : { result = new __Tile__Raw ( 0 , new Tile_Data_Raw ( ) { Simple = new global :: Tile . __Simple__Raw ( Simple ) } ) ; } break ; case global :: Tile . Wind Wind : { result = new __Tile__Raw ( 1 , new Tile_Data_Raw ( ) { Wind = new global :: Tile . __Wind__Raw ( Wind ) } ) ; } break ; case global :: Tile . Dragon Dragon : { result = new __Tile__Raw ( 2 , new Tile_Data_Raw ( ) { Dragon = new global :: Tile . __Dragon__Raw ( Dragon ) } ) ; } break ; default : throw new Exception ( "Unrecognized enum variant: " + value ) ; } } } public enum Suit { Coins , Bamboo , Characters } internal unsafe static partial class __bindings { internal static void __FromRaw ( IntPtr raw , out Suit result ) { result = ( Suit ) raw ; } internal static void __IntoRaw ( Suit value , out IntPtr result ) { result = ( IntPtr ) value ; } } public struct SimpleTile { public byte Number ; public global :: Suit Suit ; public SimpleTile ( byte number , global :: Suit suit ) { this . Number = number ; this . Suit = suit ; } internal SimpleTile ( __SimpleTile__Raw raw ) { __bindings . __FromRaw ( raw . Number , out this . Number ) ; __bindings . __FromRaw ( raw . Suit , out this . Suit ) ; } } internal struct __SimpleTile__Raw { internal byte Number ; internal IntPtr Suit ; internal __SimpleTile__Raw ( SimpleTile self ) { __bindings . __IntoRaw ( self . Number , out this . Number ) ; __bindings . __IntoRaw ( self . Suit , out this . Suit ) ; } } internal unsafe static partial class __bindings { internal static void __FromRaw ( __SimpleTile__Raw raw , out SimpleTile result ) { result = new SimpleTile ( raw ) ; } internal static void __IntoRaw ( SimpleTile self , out __SimpleTile__Raw result ) { result = new __SimpleTile__Raw ( self ) ; } } public interface IHonorTile { } public static class HonorTile { public struct Wind : IHonorTile { public global :: Wind Element0 ; public Wind ( global :: Wind element_0 ) { this . Element0 = element_0 ; } internal Wind ( __Wind__Raw raw ) { __bindings . __FromRaw ( raw . Element0 , out this . Element0 ) ; } } [ StructLayout ( LayoutKind . Sequential ) ] internal struct __Wind__Raw { internal IntPtr Element0 ; public __Wind__Raw ( Wind value ) { __bindings . __IntoRaw ( value . Element0 , out this . Element0 ) ; } } public struct Dragon : IHonorTile { public global :: Dragon Element0 ; public Dragon ( global :: Dragon element_0 ) { this . Element0 = element_0 ; } internal Dragon ( __Dragon__Raw raw ) { __bindings . __FromRaw ( raw . Element0 , out this . Element0 ) ; } } [ StructLayout ( LayoutKind . Sequential ) ] internal struct __Dragon__Raw { internal IntPtr Element0 ; public __Dragon__Raw ( Dragon value ) { __bindings . __IntoRaw ( value . Element0 , out this . Element0 ) ; } } } [ StructLayout ( LayoutKind . Sequential ) ] internal unsafe struct __HonorTile__Raw { public IntPtr Discriminant ; public HonorTile_Data_Raw Value ; public __HonorTile__Raw ( int discriminant , HonorTile_Data_Raw value ) { this . Discriminant = new IntPtr ( discriminant ) ; this . Value = value ; } public __HonorTile__Raw ( long discriminant , HonorTile_Data_Raw value ) { this . Discriminant = new IntPtr ( discriminant ) ; this . Value = value ; } public __HonorTile__Raw ( IntPtr discriminant , HonorTile_Data_Raw value ) { this . Discriminant = discriminant ; this . Value = value ; } } [ StructLayout ( LayoutKind . Explicit ) ] internal struct HonorTile_Data_Raw { [ FieldOffset ( 0 ) ] internal HonorTile . __Wind__Raw Wind ; [ FieldOffset ( 0 ) ] internal HonorTile . __Dragon__Raw Dragon ; } internal unsafe static partial class __bindings { internal static void __FromRaw ( global :: __HonorTile__Raw raw , out IHonorTile result ) { switch ( raw . Discriminant . ToInt64 ( ) ) { case 0 : { result = new global :: HonorTile . Wind ( raw . Value . Wind ) ; } break ; case 1 : { result = new global :: HonorTile . Dragon ( raw . Value . Dragon ) ; } break ; default : throw new Exception ( "Invalid discriminant " + raw . Discriminant ) ; } } internal static void __IntoRaw ( IHonorTile value , out global :: __HonorTile__Raw result ) { switch ( value ) { case global :: HonorTile . Wind Wind : { result = new __HonorTile__Raw ( 0 , new HonorTile_Data_Raw ( ) { Wind = new global :: HonorTile . __Wind__Raw ( Wind ) } ) ; } break ; case global :: HonorTile . Dragon Dragon : { result = new __HonorTile__Raw ( 1 , new HonorTile_Data_Raw ( ) { Dragon = new global :: HonorTile . __Dragon__Raw ( Dragon ) } ) ; } break ; default : throw new Exception ( "Unrecognized enum variant: " + value ) ; } } } public enum Wind { East , South , West , North } internal unsafe static partial class __bindings { internal static void __FromRaw ( IntPtr raw , out Wind result ) { result = ( Wind ) raw ; } internal static void __IntoRaw ( Wind value , out IntPtr result ) { result = ( IntPtr ) value ; } } public enum Dragon { White , Green , Red } internal unsafe static partial class __bindings { internal static void __FromRaw ( IntPtr raw , out Dragon result ) { result = ( Dragon ) raw ; } internal static void __IntoRaw ( Dragon value , out IntPtr result ) { result = ( IntPtr ) value ; } } public struct TileId { public byte Element0 ; public TileId ( byte element_0 ) { this . Element0 = element_0 ; } internal TileId ( __TileId__Raw raw ) { __bindings . __FromRaw ( raw . Element0 , out this . Element0 ) ; } } internal struct __TileId__Raw { internal byte Element0 ; internal __TileId__Raw ( TileId self ) { __bindings . __IntoRaw ( self . Element0 , out this . Element0 ) ; } } internal unsafe static partial class __bindings { internal static void __FromRaw ( __TileId__Raw raw , out TileId result ) { result = new TileId ( raw ) ; } internal static void __IntoRaw ( TileId self , out __TileId__Raw result ) { result = new __TileId__Raw ( self ) ; } } public struct TileInstance { public global :: TileId Id ; public global :: ITile Tile ; public TileInstance ( global :: TileId id , global :: ITile tile ) { this . Id = id ; this . Tile = tile ; } internal TileInstance ( __TileInstance__Raw raw ) { __bindings . __FromRaw ( raw . Id , out this . Id ) ; __bindings . __FromRaw ( raw . Tile , out this . Tile ) ; } } internal struct __TileInstance__Raw { internal global :: __TileId__Raw Id ; internal global :: __Tile__Raw Tile ; internal __TileInstance__Raw ( TileInstance self ) { __bindings . __IntoRaw ( self . Id , out this . Id ) ; __bindings . __IntoRaw ( self . Tile , out this . Tile ) ; } } internal unsafe static partial class __bindings { internal static void __FromRaw ( __TileInstance__Raw raw , out TileInstance result ) { result = new TileInstance ( raw ) ; } internal static void __IntoRaw ( TileInstance self , out __TileInstance__Raw result ) { result = new __TileInstance__Raw ( self ) ; } } public unsafe partial class Hand : IDisposable { internal IntPtr _handle ; internal Hand ( IntPtr raw ) { _handle = raw ; } public void Dispose ( ) { if ( _handle != IntPtr . Zero ) { __bindings . __cs_bindgen_drop__Hand ( _handle ) ; _handle = IntPtr . Zero ; } } } internal unsafe static partial class __bindings { internal static void __FromRaw ( IntPtr raw , out Hand result ) { result = new Hand ( raw ) ; } internal static void __IntoRaw ( Hand value , out IntPtr result ) { result = value . _handle ; } } public interface ICall { } public static class Call { public struct Chii : ICall { public global :: TileId Element0 ; public global :: TileId Element1 ; public Chii ( global :: TileId element_0 , global :: TileId element_1 ) { this . Element0 = element_0 ; this . Element1 = element_1 ; } internal Chii ( __Chii__Raw raw ) { __bindings . __FromRaw ( raw . Element0 , out this . Element0 ) ; __bindings . __FromRaw ( raw . Element1 , out this . Element1 ) ; } } [ StructLayout ( LayoutKind . Sequential ) ] internal struct __Chii__Raw { internal global :: __TileId__Raw Element0 ; internal global :: __TileId__Raw Element1 ; public __Chii__Raw ( Chii value ) { __bindings . __IntoRaw ( value . Element0 , out this . Element0 ) ; __bindings . __IntoRaw ( value . Element1 , out this . Element1 ) ; } } public struct Pon : ICall { internal Pon ( __Pon__Raw raw ) { } } [ StructLayout ( LayoutKind . Sequential ) ] internal struct __Pon__Raw { public __Pon__Raw ( Pon value ) { } } public struct Kan : ICall { internal Kan ( __Kan__Raw raw ) { } } [ StructLayout ( LayoutKind . Sequential ) ] internal struct __Kan__Raw { public __Kan__Raw ( Kan value ) { } } } [ StructLayout ( LayoutKind . Sequential ) ] internal unsafe struct __Call__Raw { public IntPtr Discriminant ; public Call_Data_Raw Value ; public __Call__Raw ( int discriminant , Call_Data_Raw value ) { this . Discriminant = new IntPtr ( discriminant ) ; this . Value = value ; } public __Call__Raw ( long discriminant , Call_Data_Raw value ) { this . Discriminant = new IntPtr ( discriminant ) ; this . Value = value ; } public __Call__Raw ( IntPtr discriminant , Call_Data_Raw value ) { this . Discriminant = discriminant ; this . Value = value ; } } [ StructLayout ( LayoutKind . Explicit ) ] internal struct Call_Data_Raw { [ FieldOffset ( 0 ) ] internal Call . __Chii__Raw Chii ; } internal unsafe static partial class __bindings { internal static void __FromRaw ( global :: __Call__Raw raw , out ICall result ) { switch ( raw . Discriminant . ToInt64 ( ) ) { case 0 : { result = new global :: Call . Chii ( raw . Value . Chii ) ; } break ; case 1 : { result = new global :: Call . Pon ( ) ; } break ; case 2 : { result = new global :: Call . Kan ( ) ; } break ; default : throw new Exception ( "Invalid discriminant " + raw . Discriminant ) ; } } internal static void __IntoRaw ( ICall value , out global :: __Call__Raw result ) { switch ( value ) { case global :: Call . Chii Chii : { result = new __Call__Raw ( 0 , new Call_Data_Raw ( ) { Chii = new global :: Call . __Chii__Raw ( Chii ) } ) ; } break ; case global :: Call . Pon Pon : { result = new __Call__Raw ( 1 , new Call_Data_Raw ( ) { } ) ; } break ; case global :: Call . Kan Kan : { result = new __Call__Raw ( 2 , new Call_Data_Raw ( ) { } ) ; } break ; default : throw new Exception ( "Unrecognized enum variant: " + value ) ; } } } public unsafe partial class MatchState : IDisposable { internal IntPtr _handle ; internal MatchState ( IntPtr raw ) { _handle = raw ; } public void Dispose ( ) { if ( _handle != IntPtr . Zero ) { __bindings . __cs_bindgen_drop__MatchState ( _handle ) ; _handle = IntPtr . Zero ; } } } internal unsafe static partial class __bindings { internal static void __FromRaw ( IntPtr raw , out MatchState result ) { result = new MatchState ( raw ) ; } internal static void __IntoRaw ( MatchState value , out IntPtr result ) { result = value . _handle ; } } partial class MatchState { public global :: MatchId Id ( ) { unsafe { global :: __MatchId__Raw __raw_result ; __raw_result = __bindings . __cs_bindgen_generated__id__MatchState ( this . _handle ) ; __bindings . __FromRaw ( __raw_result , out global :: MatchId __result ) ; return __result ; } } } partial class MatchState { public global :: Wind CurrentTurn ( ) { unsafe { IntPtr __raw_result ; __raw_result = __bindings . __cs_bindgen_generated__current_turn__MatchState ( this . _handle ) ; __bindings . __FromRaw ( __raw_result , out global :: Wind __result ) ; return __result ; } } } partial class MatchState { public List < global :: TileInstance > PlayerHand ( global :: Wind seat ) { unsafe { RawVec __raw_result ; __bindings . __IntoRaw ( seat , out IntPtr __seat ) ; __raw_result = __bindings . __cs_bindgen_generated__player_hand__MatchState ( this . _handle , __seat ) ; __bindings . __FromRaw ( __raw_result , out List < global :: TileInstance > __result ) ; return __result ; } } } partial class MatchState { public bool PlayerHasCurrentDraw ( global :: Wind seat ) { unsafe { byte __raw_result ; __bindings . __IntoRaw ( seat , out IntPtr __seat ) ; __raw_result = __bindings . __cs_bindgen_generated__player_has_current_draw__MatchState ( this . _handle , __seat ) ; __bindings . __FromRaw ( __raw_result , out bool __result ) ; return __result ; } } } partial class MatchState { public global :: TileInstance CurrentDraw ( global :: Wind seat ) { unsafe { global :: __TileInstance__Raw __raw_result ; __bindings . __IntoRaw ( seat , out IntPtr __seat ) ; __raw_result = __bindings . __cs_bindgen_generated__current_draw__MatchState ( this . _handle , __seat ) ; __bindings . __FromRaw ( __raw_result , out global :: TileInstance __result ) ; return __result ; } } } partial class MatchState { public bool TryDiscardTile ( global :: Wind seat , global :: TileId tile ) { unsafe { byte __raw_result ; __bindings . __IntoRaw ( seat , out IntPtr __seat ) ; __bindings . __IntoRaw ( tile , out global :: __TileId__Raw __tile ) ; __raw_result = __bindings . __cs_bindgen_generated__try_discard_tile__MatchState ( this . _handle , __seat , __tile ) ; __bindings . __FromRaw ( __raw_result , out bool __result ) ; return __result ; } } } partial class MatchState { public bool TryDrawTile ( global :: Wind seat ) { unsafe { byte __raw_result ; __bindings . __IntoRaw ( seat , out IntPtr __seat ) ; __raw_result = __bindings . __cs_bindgen_generated__try_draw_tile__MatchState ( this . _handle , __seat ) ; __bindings . __FromRaw ( __raw_result , out bool __result ) ; return __result ; } } } partial class MatchState { public string RequestDiscardTile ( global :: Wind player , global :: TileId tile ) { unsafe { RawVec __raw_result ; __bindings . __IntoRaw ( player , out IntPtr __player ) ; __bindings . __IntoRaw ( tile , out global :: __TileId__Raw __tile ) ; __raw_result = __bindings . __cs_bindgen_generated__request_discard_tile__MatchState ( this . _handle , __player , __tile ) ; __bindings . __FromRaw ( __raw_result , out string __result ) ; return __result ; } } } partial class MatchState { public global :: IMatchEvent HandleEvent ( string json ) { unsafe { global :: __MatchEvent__Raw __raw_result ; fixed ( char * __fixed_json = json ) { __bindings . __IntoRaw ( json , out RawVec __json ) ; __raw_result = __bindings . __cs_bindgen_generated__handle_event__MatchState ( this . _handle , __json ) ; } __bindings . __FromRaw ( __raw_result , out global :: IMatchEvent __result ) ; return __result ; } } } public struct MatchId { public uint Element0 ; public MatchId ( uint element_0 ) { this . Element0 = element_0 ; } internal MatchId ( __MatchId__Raw raw ) { __bindings . __FromRaw ( raw . Element0 , out this . Element0 ) ; } } internal struct __MatchId__Raw { internal uint Element0 ; internal __MatchId__Raw ( MatchId self ) { __bindings . __IntoRaw ( self . Element0 , out this . Element0 ) ; } } internal unsafe static partial class __bindings { internal static void __FromRaw ( __MatchId__Raw raw , out MatchId result ) { result = new MatchId ( raw ) ; } internal static void __IntoRaw ( MatchId self , out __MatchId__Raw result ) { result = new __MatchId__Raw ( self ) ; } } public struct AccountId { public ulong Element0 ; public AccountId ( ulong element_0 ) { this . Element0 = element_0 ; } internal AccountId ( __AccountId__Raw raw ) { __bindings . __FromRaw ( raw . Element0 , out this . Element0 ) ; } } internal struct __AccountId__Raw { internal ulong Element0 ; internal __AccountId__Raw ( AccountId self ) { __bindings . __IntoRaw ( self . Element0 , out this . Element0 ) ; } } internal unsafe static partial class __bindings { internal static void __FromRaw ( __AccountId__Raw raw , out AccountId result ) { result = new AccountId ( raw ) ; } internal static void __IntoRaw ( AccountId self , out __AccountId__Raw result ) { result = new __AccountId__Raw ( self ) ; } } public struct SessionId { public uint Element0 ; public SessionId ( uint element_0 ) { this . Element0 = element_0 ; } internal SessionId ( __SessionId__Raw raw ) { __bindings . __FromRaw ( raw . Element0 , out this . Element0 ) ; } } internal struct __SessionId__Raw { internal uint Element0 ; internal __SessionId__Raw ( SessionId self ) { __bindings . __IntoRaw ( self . Element0 , out this . Element0 ) ; } } internal unsafe static partial class __bindings { internal static void __FromRaw ( __SessionId__Raw raw , out SessionId result ) { result = new SessionId ( raw ) ; } internal static void __IntoRaw ( SessionId self , out __SessionId__Raw result ) { result = new __SessionId__Raw ( self ) ; } } public unsafe partial class PlayerState : IDisposable { internal IntPtr _handle ; internal PlayerState ( IntPtr raw ) { _handle = raw ; } public void Dispose ( ) { if ( _handle != IntPtr . Zero ) { __bindings . __cs_bindgen_drop__PlayerState ( _handle ) ; _handle = IntPtr . Zero ; } } } internal unsafe static partial class __bindings { internal static void __FromRaw ( IntPtr raw , out PlayerState result ) { result = new PlayerState ( raw ) ; } internal static void __IntoRaw ( PlayerState value , out IntPtr result ) { result = value . _handle ; } } public unsafe partial class Credentials : IDisposable { internal IntPtr _handle ; internal Credentials ( IntPtr raw ) { _handle = raw ; } public void Dispose ( ) { if ( _handle != IntPtr . Zero ) { __bindings . __cs_bindgen_drop__Credentials ( _handle ) ; _handle = IntPtr . Zero ; } } } internal unsafe static partial class __bindings { internal static void __FromRaw ( IntPtr raw , out Credentials result ) { result = new Credentials ( raw ) ; } internal static void __IntoRaw ( Credentials value , out IntPtr result ) { result = value . _handle ; } } public interface IMatchEvent { } public static class MatchEvent { public struct TileDrawn : IMatchEvent { public global :: Wind Seat ; public global :: TileId Tile ; public TileDrawn ( global :: Wind seat , global :: TileId tile ) { this . Seat = seat ; this . Tile = tile ; } internal TileDrawn ( __TileDrawn__Raw raw ) { __bindings . __FromRaw ( raw . Seat , out this . Seat ) ; __bindings . __FromRaw ( raw . Tile , out this . Tile ) ; } } [ StructLayout ( LayoutKind . Sequential ) ] internal struct __TileDrawn__Raw { internal IntPtr Seat ; internal global :: __TileId__Raw Tile ; public __TileDrawn__Raw ( TileDrawn value ) { __bindings . __IntoRaw ( value . Seat , out this . Seat ) ; __bindings . __IntoRaw ( value . Tile , out this . Tile ) ; } } public struct TileDiscarded : IMatchEvent { public global :: Wind Seat ; public global :: TileId Tile ; public TileDiscarded ( global :: Wind seat , global :: TileId tile ) { this . Seat = seat ; this . Tile = tile ; } internal TileDiscarded ( __TileDiscarded__Raw raw ) { __bindings . __FromRaw ( raw . Seat , out this . Seat ) ; __bindings . __FromRaw ( raw . Tile , out this . Tile ) ; } } [ StructLayout ( LayoutKind . Sequential ) ] internal struct __TileDiscarded__Raw { internal IntPtr Seat ; internal global :: __TileId__Raw Tile ; public __TileDiscarded__Raw ( TileDiscarded value ) { __bindings . __IntoRaw ( value . Seat , out this . Seat ) ; __bindings . __IntoRaw ( value . Tile , out this . Tile ) ; } } public struct MatchEnded : IMatchEvent { internal MatchEnded ( __MatchEnded__Raw raw ) { } } [ StructLayout ( LayoutKind . Sequential ) ] internal struct __MatchEnded__Raw { public __MatchEnded__Raw ( MatchEnded value ) { } } } [ StructLayout ( LayoutKind . Sequential ) ] internal unsafe struct __MatchEvent__Raw { public IntPtr Discriminant ; public MatchEvent_Data_Raw Value ; public __MatchEvent__Raw ( int discriminant , MatchEvent_Data_Raw value ) { this . Discriminant = new IntPtr ( discriminant ) ; this . Value = value ; } public __MatchEvent__Raw ( long discriminant , MatchEvent_Data_Raw value ) { this . Discriminant = new IntPtr ( discriminant ) ; this . Value = value ; } public __MatchEvent__Raw ( IntPtr discriminant , MatchEvent_Data_Raw value ) { this . Discriminant = discriminant ; this . Value = value ; } } [ StructLayout ( LayoutKind . Explicit ) ] internal struct MatchEvent_Data_Raw { [ FieldOffset ( 0 ) ] internal MatchEvent . __TileDrawn__Raw TileDrawn ; [ FieldOffset ( 0 ) ] internal MatchEvent . __TileDiscarded__Raw TileDiscarded ; } internal unsafe static partial class __bindings { internal static void __FromRaw ( global :: __MatchEvent__Raw raw , out IMatchEvent result ) { switch ( raw . Discriminant . ToInt64 ( ) ) { case 0 : { result = new global :: MatchEvent . TileDrawn ( raw . Value . TileDrawn ) ; } break ; case 1 : { result = new global :: MatchEvent . TileDiscarded ( raw . Value . TileDiscarded ) ; } break ; case 2 : { result = new global :: MatchEvent . MatchEnded ( ) ; } break ; default : throw new Exception ( "Invalid discriminant " + raw . Discriminant ) ; } } internal static void __IntoRaw ( IMatchEvent value , out global :: __MatchEvent__Raw result ) { switch ( value ) { case global :: MatchEvent . TileDrawn TileDrawn : { result = new __MatchEvent__Raw ( 0 , new MatchEvent_Data_Raw ( ) { TileDrawn = new global :: MatchEvent . __TileDrawn__Raw ( TileDrawn ) } ) ; } break ; case global :: MatchEvent . TileDiscarded TileDiscarded : { result = new __MatchEvent__Raw ( 1 , new MatchEvent_Data_Raw ( ) { TileDiscarded = new global :: MatchEvent . __TileDiscarded__Raw ( TileDiscarded ) } ) ; } break ; case global :: MatchEvent . MatchEnded MatchEnded : { result = new __MatchEvent__Raw ( 2 , new MatchEvent_Data_Raw ( ) { } ) ; } break ; default : throw new Exception ( "Unrecognized enum variant: " + value ) ; } } } internal delegate void FromRaw < R , T > ( R raw , out T result ) ; [ StructLayout ( LayoutKind . Sequential ) ] internal unsafe struct RawVec { public IntPtr Ptr ; public UIntPtr Length ; public UIntPtr Capacity ; public List < T > ToPrimitiveList < T > ( ) where T : unmanaged { var result = new List < T > ( ( int ) Length ) ; var orig = ( T * ) Ptr ; for ( int index = 0 ; index < ( int ) Length ; index += 1 ) { result . Add ( orig [ index ] ) ; } return result ; } public List < T > ToPrimitiveList < D , T > ( Func < D , T > conversion ) where D : unmanaged { var result = new List < T > ( ( int ) Length ) ; var orig = ( D * ) Ptr ; for ( int index = 0 ; index < ( int ) Length ; index += 1 ) { result . Add ( conversion ( orig [ index ] ) ) ; } return result ; } public List < T > ToList < R , T > ( Func < RawSlice , UIntPtr , R > indexFn , FromRaw < R , T > fromRaw ) where R : unmanaged { var slice = AsSlice ( ) ; var result = new List < T > ( ( int ) Length ) ; for ( int index = 0 ; index < ( int ) Length ; index += 1 ) { R rawElement = indexFn ( slice , ( UIntPtr ) index ) ; fromRaw ( rawElement , out T element ) ; result . Add ( element ) ; } return result ; } public RawSlice AsSlice ( ) { return new RawSlice ( Ptr , Length ) ; } } [ StructLayout ( LayoutKind . Sequential ) ] internal unsafe struct RawSlice { public IntPtr Ptr ; public UIntPtr Length ; public RawSlice ( IntPtr ptr , UIntPtr len ) { Ptr = ptr ; Length = len ; } public RawSlice ( IntPtr ptr , int len ) { Ptr = ptr ; Length = ( UIntPtr ) len ; } }