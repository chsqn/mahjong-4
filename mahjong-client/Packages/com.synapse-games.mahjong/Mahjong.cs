using System ; using System . Runtime . InteropServices ; using System . Text ; internal unsafe static class __bindings { [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_drop__ClientState" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_drop__ClientState ( void * self ) ; internal static global :: ClientState __FromRaw ( global :: __ClientState__Raw raw ) { return new global :: ClientState ( raw ) ; } internal static global :: __ClientState__Raw __IntoRaw ( global :: ClientState self ) { return new global :: __ClientState__Raw ( self ) ; } [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated__new" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern global :: __ClientState__Raw __cs_bindgen_generated__new ( ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated__set_credentials" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_generated__set_credentials ( void * self , ulong id , RustOwnedString token ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated__create_handshake_request" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern RustOwnedString __cs_bindgen_generated__create_handshake_request ( void * self ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated__handle_handshake_response" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern RustBool __cs_bindgen_generated__handle_handshake_response ( void * self , RustOwnedString json ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated__create_start_match_request" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern RustOwnedString __cs_bindgen_generated__create_start_match_request ( void * self ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated__handle_start_match_response" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern global :: __Match__Raw __cs_bindgen_generated__handle_start_match_response ( void * self , RustOwnedString response ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated__account_id" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern ulong __cs_bindgen_generated__account_id ( void * self ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated__points" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern ulong __cs_bindgen_generated__points ( void * self ) ; internal static global :: ITile __FromRaw ( global :: __Tile__Raw raw ) { switch ( raw . Discriminant . ToInt64 ( ) ) { case 0 : { return new global :: Tile . Simple ( raw . Value . Simple ) ; } case 1 : { return new global :: Tile . Bonus ( raw . Value . Bonus ) ; } case 2 : { return new global :: Tile . Honor ( raw . Value . Honor ) ; } default : throw new Exception ( "Invalid discriminant " + raw . Discriminant ) ; } } internal static global :: __Tile__Raw __IntoRaw ( global :: ITile self ) { switch ( self ) { case global :: Tile . Simple Simple : { return new __Tile__Raw ( 0 , new Tile_Data_Raw ( ) { Simple = new global :: Tile . __Simple__Raw ( Simple ) } ) ; } case global :: Tile . Bonus Bonus : { return new __Tile__Raw ( 1 , new Tile_Data_Raw ( ) { Bonus = new global :: Tile . __Bonus__Raw ( Bonus ) } ) ; } case global :: Tile . Honor Honor : { return new __Tile__Raw ( 2 , new Tile_Data_Raw ( ) { Honor = new global :: Tile . __Honor__Raw ( Honor ) } ) ; } default : throw new Exception ( "Unrecognized enum variant: " + self ) ; } } internal static global :: Suit __FromRaw ( global :: __Suit__Raw raw ) { return ( Suit ) raw ; } internal static global :: __Suit__Raw __IntoRaw ( global :: Suit self ) { return new __Suit__Raw ( self ) ; } [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_drop__SimpleTile" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_drop__SimpleTile ( void * self ) ; internal static global :: SimpleTile __FromRaw ( global :: __SimpleTile__Raw raw ) { return new global :: SimpleTile ( raw ) ; } internal static global :: __SimpleTile__Raw __IntoRaw ( global :: SimpleTile self ) { return new global :: __SimpleTile__Raw ( self ) ; } internal static global :: IBonusTile __FromRaw ( global :: __BonusTile__Raw raw ) { switch ( raw . Discriminant . ToInt64 ( ) ) { case 0 : { return new global :: BonusTile . Flower ( raw . Value . Flower ) ; } case 1 : { return new global :: BonusTile . Season ( raw . Value . Season ) ; } default : throw new Exception ( "Invalid discriminant " + raw . Discriminant ) ; } } internal static global :: __BonusTile__Raw __IntoRaw ( global :: IBonusTile self ) { switch ( self ) { case global :: BonusTile . Flower Flower : { return new __BonusTile__Raw ( 0 , new BonusTile_Data_Raw ( ) { Flower = new global :: BonusTile . __Flower__Raw ( Flower ) } ) ; } case global :: BonusTile . Season Season : { return new __BonusTile__Raw ( 1 , new BonusTile_Data_Raw ( ) { Season = new global :: BonusTile . __Season__Raw ( Season ) } ) ; } default : throw new Exception ( "Unrecognized enum variant: " + self ) ; } } internal static global :: Flower __FromRaw ( global :: __Flower__Raw raw ) { return ( Flower ) raw ; } internal static global :: __Flower__Raw __IntoRaw ( global :: Flower self ) { return new __Flower__Raw ( self ) ; } internal static global :: Season __FromRaw ( global :: __Season__Raw raw ) { return ( Season ) raw ; } internal static global :: __Season__Raw __IntoRaw ( global :: Season self ) { return new __Season__Raw ( self ) ; } internal static global :: IHonorTile __FromRaw ( global :: __HonorTile__Raw raw ) { switch ( raw . Discriminant . ToInt64 ( ) ) { case 0 : { return new global :: HonorTile . Wind ( raw . Value . Wind ) ; } case 1 : { return new global :: HonorTile . Dragon ( raw . Value . Dragon ) ; } default : throw new Exception ( "Invalid discriminant " + raw . Discriminant ) ; } } internal static global :: __HonorTile__Raw __IntoRaw ( global :: IHonorTile self ) { switch ( self ) { case global :: HonorTile . Wind Wind : { return new __HonorTile__Raw ( 0 , new HonorTile_Data_Raw ( ) { Wind = new global :: HonorTile . __Wind__Raw ( Wind ) } ) ; } case global :: HonorTile . Dragon Dragon : { return new __HonorTile__Raw ( 1 , new HonorTile_Data_Raw ( ) { Dragon = new global :: HonorTile . __Dragon__Raw ( Dragon ) } ) ; } default : throw new Exception ( "Unrecognized enum variant: " + self ) ; } } internal static global :: Wind __FromRaw ( global :: __Wind__Raw raw ) { return ( Wind ) raw ; } internal static global :: __Wind__Raw __IntoRaw ( global :: Wind self ) { return new __Wind__Raw ( self ) ; } internal static global :: Dragon __FromRaw ( global :: __Dragon__Raw raw ) { return ( Dragon ) raw ; } internal static global :: __Dragon__Raw __IntoRaw ( global :: Dragon self ) { return new __Dragon__Raw ( self ) ; } [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_drop__Match" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_drop__Match ( void * self ) ; internal static global :: Match __FromRaw ( global :: __Match__Raw raw ) { return new global :: Match ( raw ) ; } internal static global :: __Match__Raw __IntoRaw ( global :: Match self ) { return new global :: __Match__Raw ( self ) ; } [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated__id" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern uint __cs_bindgen_generated__id ( void * self ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_generated__get_player_tile" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern global :: __Tile__Raw __cs_bindgen_generated__get_player_tile ( void * self , int player , int tile ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_drop__Player" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_drop__Player ( void * self ) ; internal static global :: Player __FromRaw ( global :: __Player__Raw raw ) { return new global :: Player ( raw ) ; } internal static global :: __Player__Raw __IntoRaw ( global :: Player self ) { return new global :: __Player__Raw ( self ) ; } [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_drop_string" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern void __cs_bindgen_drop_string ( RustOwnedString raw ) ; [ DllImport ( "mahjong" , EntryPoint = "__cs_bindgen_string_from_utf16" , CallingConvention = CallingConvention . Cdecl ) ] internal static extern RustOwnedString __cs_bindgen_string_from_utf16 ( RawCsString raw ) ; internal static byte __FromRaw ( byte raw ) { return raw ; } internal static sbyte __FromRaw ( sbyte raw ) { return raw ; } internal static short __FromRaw ( short raw ) { return raw ; } internal static ushort __FromRaw ( ushort raw ) { return raw ; } internal static int __FromRaw ( int raw ) { return raw ; } internal static uint __FromRaw ( uint raw ) { return raw ; } internal static long __FromRaw ( long raw ) { return raw ; } internal static ulong __FromRaw ( ulong raw ) { return raw ; } internal static float __FromRaw ( float raw ) { return raw ; } internal static double __FromRaw ( double raw ) { return raw ; } internal static bool __FromRaw ( RustBool raw ) { return raw ; } internal static string __FromRaw ( RustOwnedString raw ) { string result = Encoding . UTF8 . GetString ( raw . Ptr , ( int ) raw . Length ) ; __bindings . __cs_bindgen_drop_string ( raw ) ; return result ; } internal static byte __IntoRaw ( byte raw ) { return raw ; } internal static sbyte __IntoRaw ( sbyte raw ) { return raw ; } internal static short __IntoRaw ( short raw ) { return raw ; } internal static ushort __IntoRaw ( ushort raw ) { return raw ; } internal static int __IntoRaw ( int raw ) { return raw ; } internal static uint __IntoRaw ( uint raw ) { return raw ; } internal static long __IntoRaw ( long raw ) { return raw ; } internal static ulong __IntoRaw ( ulong raw ) { return raw ; } internal static float __IntoRaw ( float raw ) { return raw ; } internal static double __IntoRaw ( double raw ) { return raw ; } internal static RustBool __IntoRaw ( bool raw ) { return raw ; } internal static RustOwnedString __IntoRaw ( string orig ) { fixed ( char * origPtr = orig ) { return __cs_bindgen_string_from_utf16 ( new RawCsString ( origPtr , orig . Length ) ) ; } } } public class Mahjong { } public unsafe partial class ClientState : IDisposable { internal void * _handle ; internal ClientState ( __ClientState__Raw raw ) { _handle = raw . Handle ; } public void Dispose ( ) { if ( _handle != null ) { __bindings . __cs_bindgen_drop__ClientState ( _handle ) ; _handle = null ; } } } [ StructLayout ( LayoutKind . Explicit ) ] internal unsafe struct __ClientState__Raw { [ FieldOffset ( 0 ) ] public void * Handle ; public __ClientState__Raw ( ClientState orig ) { this . Handle = orig . _handle ; } } partial class ClientState { public ClientState ( ) { unsafe { _handle = __bindings . __cs_bindgen_generated__new ( ) . Handle ; } } } partial class ClientState { public void SetCredentials ( ulong id , string token ) { unsafe { fixed ( char * __fixed_token = token ) { __bindings . __cs_bindgen_generated__set_credentials ( this . _handle , __bindings . __IntoRaw ( id ) , __bindings . __IntoRaw ( token ) ) ; } } } } partial class ClientState { public string CreateHandshakeRequest ( ) { string __ret ; unsafe { __ret = __bindings . __FromRaw ( __bindings . __cs_bindgen_generated__create_handshake_request ( this . _handle ) ) ; } return __ret ; } } partial class ClientState { public bool HandleHandshakeResponse ( string json ) { bool __ret ; unsafe { fixed ( char * __fixed_json = json ) { __ret = __bindings . __FromRaw ( __bindings . __cs_bindgen_generated__handle_handshake_response ( this . _handle , __bindings . __IntoRaw ( json ) ) ) ; } } return __ret ; } } partial class ClientState { public string CreateStartMatchRequest ( ) { string __ret ; unsafe { __ret = __bindings . __FromRaw ( __bindings . __cs_bindgen_generated__create_start_match_request ( this . _handle ) ) ; } return __ret ; } } partial class ClientState { public global :: Match HandleStartMatchResponse ( string response ) { global :: Match __ret ; unsafe { fixed ( char * __fixed_response = response ) { __ret = __bindings . __FromRaw ( __bindings . __cs_bindgen_generated__handle_start_match_response ( this . _handle , __bindings . __IntoRaw ( response ) ) ) ; } } return __ret ; } } partial class ClientState { public ulong AccountId ( ) { ulong __ret ; unsafe { __ret = __bindings . __FromRaw ( __bindings . __cs_bindgen_generated__account_id ( this . _handle ) ) ; } return __ret ; } } partial class ClientState { public ulong Points ( ) { ulong __ret ; unsafe { __ret = __bindings . __FromRaw ( __bindings . __cs_bindgen_generated__points ( this . _handle ) ) ; } return __ret ; } } public interface ITile { } public static class Tile { public struct Simple : ITile { public global :: SimpleTile Element0 ; internal Simple ( __Simple__Raw raw ) { this . Element0 = __bindings . __FromRaw ( raw . Element0 ) ; } } [ StructLayout ( LayoutKind . Sequential ) ] internal struct __Simple__Raw { internal global :: __SimpleTile__Raw Element0 ; public __Simple__Raw ( Simple self ) { this . Element0 = __bindings . __IntoRaw ( self . Element0 ) ; } } public struct Bonus : ITile { public global :: IBonusTile Element0 ; internal Bonus ( __Bonus__Raw raw ) { this . Element0 = __bindings . __FromRaw ( raw . Element0 ) ; } } [ StructLayout ( LayoutKind . Sequential ) ] internal struct __Bonus__Raw { internal global :: __BonusTile__Raw Element0 ; public __Bonus__Raw ( Bonus self ) { this . Element0 = __bindings . __IntoRaw ( self . Element0 ) ; } } public struct Honor : ITile { public global :: IHonorTile Element0 ; internal Honor ( __Honor__Raw raw ) { this . Element0 = __bindings . __FromRaw ( raw . Element0 ) ; } } [ StructLayout ( LayoutKind . Sequential ) ] internal struct __Honor__Raw { internal global :: __HonorTile__Raw Element0 ; public __Honor__Raw ( Honor self ) { this . Element0 = __bindings . __IntoRaw ( self . Element0 ) ; } } } [ StructLayout ( LayoutKind . Sequential ) ] internal unsafe struct __Tile__Raw { public IntPtr Discriminant ; public Tile_Data_Raw Value ; public __Tile__Raw ( int discriminant , Tile_Data_Raw value ) { this . Discriminant = new IntPtr ( discriminant ) ; this . Value = value ; } public __Tile__Raw ( long discriminant , Tile_Data_Raw value ) { this . Discriminant = new IntPtr ( discriminant ) ; this . Value = value ; } public __Tile__Raw ( IntPtr discriminant , Tile_Data_Raw value ) { this . Discriminant = discriminant ; this . Value = value ; } } [ StructLayout ( LayoutKind . Explicit ) ] internal struct Tile_Data_Raw { [ FieldOffset ( 0 ) ] internal Tile . __Simple__Raw Simple ; [ FieldOffset ( 0 ) ] internal Tile . __Bonus__Raw Bonus ; [ FieldOffset ( 0 ) ] internal Tile . __Honor__Raw Honor ; } public enum Suit { Coins , Bamboo , Characters } [ StructLayout ( LayoutKind . Explicit ) ] internal unsafe struct __Suit__Raw { [ FieldOffset ( 0 ) ] public IntPtr Inner ; public __Suit__Raw ( Suit self ) { this . Inner = ( IntPtr ) self ; } public static explicit operator Suit ( __Suit__Raw raw ) { return ( Suit ) raw . Inner ; } } public unsafe partial class SimpleTile : IDisposable { internal void * _handle ; internal SimpleTile ( __SimpleTile__Raw raw ) { _handle = raw . Handle ; } public void Dispose ( ) { if ( _handle != null ) { __bindings . __cs_bindgen_drop__SimpleTile ( _handle ) ; _handle = null ; } } } [ StructLayout ( LayoutKind . Explicit ) ] internal unsafe struct __SimpleTile__Raw { [ FieldOffset ( 0 ) ] public void * Handle ; public __SimpleTile__Raw ( SimpleTile orig ) { this . Handle = orig . _handle ; } } public interface IBonusTile { } public static class BonusTile { public struct Flower : IBonusTile { public global :: Flower Element0 ; internal Flower ( __Flower__Raw raw ) { this . Element0 = __bindings . __FromRaw ( raw . Element0 ) ; } } [ StructLayout ( LayoutKind . Sequential ) ] internal struct __Flower__Raw { internal global :: __Flower__Raw Element0 ; public __Flower__Raw ( Flower self ) { this . Element0 = __bindings . __IntoRaw ( self . Element0 ) ; } } public struct Season : IBonusTile { public global :: Season Element0 ; internal Season ( __Season__Raw raw ) { this . Element0 = __bindings . __FromRaw ( raw . Element0 ) ; } } [ StructLayout ( LayoutKind . Sequential ) ] internal struct __Season__Raw { internal global :: __Season__Raw Element0 ; public __Season__Raw ( Season self ) { this . Element0 = __bindings . __IntoRaw ( self . Element0 ) ; } } } [ StructLayout ( LayoutKind . Sequential ) ] internal unsafe struct __BonusTile__Raw { public IntPtr Discriminant ; public BonusTile_Data_Raw Value ; public __BonusTile__Raw ( int discriminant , BonusTile_Data_Raw value ) { this . Discriminant = new IntPtr ( discriminant ) ; this . Value = value ; } public __BonusTile__Raw ( long discriminant , BonusTile_Data_Raw value ) { this . Discriminant = new IntPtr ( discriminant ) ; this . Value = value ; } public __BonusTile__Raw ( IntPtr discriminant , BonusTile_Data_Raw value ) { this . Discriminant = discriminant ; this . Value = value ; } } [ StructLayout ( LayoutKind . Explicit ) ] internal struct BonusTile_Data_Raw { [ FieldOffset ( 0 ) ] internal BonusTile . __Flower__Raw Flower ; [ FieldOffset ( 0 ) ] internal BonusTile . __Season__Raw Season ; } public enum Flower { PlumBlossom , Orchid , Chrysanthemum , Bamboo } [ StructLayout ( LayoutKind . Explicit ) ] internal unsafe struct __Flower__Raw { [ FieldOffset ( 0 ) ] public IntPtr Inner ; public __Flower__Raw ( Flower self ) { this . Inner = ( IntPtr ) self ; } public static explicit operator Flower ( __Flower__Raw raw ) { return ( Flower ) raw . Inner ; } } public enum Season { Spring , Summer , Autumn , Winter } [ StructLayout ( LayoutKind . Explicit ) ] internal unsafe struct __Season__Raw { [ FieldOffset ( 0 ) ] public IntPtr Inner ; public __Season__Raw ( Season self ) { this . Inner = ( IntPtr ) self ; } public static explicit operator Season ( __Season__Raw raw ) { return ( Season ) raw . Inner ; } } public interface IHonorTile { } public static class HonorTile { public struct Wind : IHonorTile { public global :: Wind Element0 ; internal Wind ( __Wind__Raw raw ) { this . Element0 = __bindings . __FromRaw ( raw . Element0 ) ; } } [ StructLayout ( LayoutKind . Sequential ) ] internal struct __Wind__Raw { internal global :: __Wind__Raw Element0 ; public __Wind__Raw ( Wind self ) { this . Element0 = __bindings . __IntoRaw ( self . Element0 ) ; } } public struct Dragon : IHonorTile { public global :: Dragon Element0 ; internal Dragon ( __Dragon__Raw raw ) { this . Element0 = __bindings . __FromRaw ( raw . Element0 ) ; } } [ StructLayout ( LayoutKind . Sequential ) ] internal struct __Dragon__Raw { internal global :: __Dragon__Raw Element0 ; public __Dragon__Raw ( Dragon self ) { this . Element0 = __bindings . __IntoRaw ( self . Element0 ) ; } } } [ StructLayout ( LayoutKind . Sequential ) ] internal unsafe struct __HonorTile__Raw { public IntPtr Discriminant ; public HonorTile_Data_Raw Value ; public __HonorTile__Raw ( int discriminant , HonorTile_Data_Raw value ) { this . Discriminant = new IntPtr ( discriminant ) ; this . Value = value ; } public __HonorTile__Raw ( long discriminant , HonorTile_Data_Raw value ) { this . Discriminant = new IntPtr ( discriminant ) ; this . Value = value ; } public __HonorTile__Raw ( IntPtr discriminant , HonorTile_Data_Raw value ) { this . Discriminant = discriminant ; this . Value = value ; } } [ StructLayout ( LayoutKind . Explicit ) ] internal struct HonorTile_Data_Raw { [ FieldOffset ( 0 ) ] internal HonorTile . __Wind__Raw Wind ; [ FieldOffset ( 0 ) ] internal HonorTile . __Dragon__Raw Dragon ; } public enum Wind { East , South , West , North } [ StructLayout ( LayoutKind . Explicit ) ] internal unsafe struct __Wind__Raw { [ FieldOffset ( 0 ) ] public IntPtr Inner ; public __Wind__Raw ( Wind self ) { this . Inner = ( IntPtr ) self ; } public static explicit operator Wind ( __Wind__Raw raw ) { return ( Wind ) raw . Inner ; } } public enum Dragon { Red , Green , White } [ StructLayout ( LayoutKind . Explicit ) ] internal unsafe struct __Dragon__Raw { [ FieldOffset ( 0 ) ] public IntPtr Inner ; public __Dragon__Raw ( Dragon self ) { this . Inner = ( IntPtr ) self ; } public static explicit operator Dragon ( __Dragon__Raw raw ) { return ( Dragon ) raw . Inner ; } } public unsafe partial class Match : IDisposable { internal void * _handle ; internal Match ( __Match__Raw raw ) { _handle = raw . Handle ; } public void Dispose ( ) { if ( _handle != null ) { __bindings . __cs_bindgen_drop__Match ( _handle ) ; _handle = null ; } } } [ StructLayout ( LayoutKind . Explicit ) ] internal unsafe struct __Match__Raw { [ FieldOffset ( 0 ) ] public void * Handle ; public __Match__Raw ( Match orig ) { this . Handle = orig . _handle ; } } partial class Match { public uint Id ( ) { uint __ret ; unsafe { __ret = __bindings . __FromRaw ( __bindings . __cs_bindgen_generated__id ( this . _handle ) ) ; } return __ret ; } } partial class Match { public global :: ITile GetPlayerTile ( int player , int tile ) { global :: ITile __ret ; unsafe { __ret = __bindings . __FromRaw ( __bindings . __cs_bindgen_generated__get_player_tile ( this . _handle , __bindings . __IntoRaw ( player ) , __bindings . __IntoRaw ( tile ) ) ) ; } return __ret ; } } public unsafe partial class Player : IDisposable { internal void * _handle ; internal Player ( __Player__Raw raw ) { _handle = raw . Handle ; } public void Dispose ( ) { if ( _handle != null ) { __bindings . __cs_bindgen_drop__Player ( _handle ) ; _handle = null ; } } } [ StructLayout ( LayoutKind . Explicit ) ] internal unsafe struct __Player__Raw { [ FieldOffset ( 0 ) ] public void * Handle ; public __Player__Raw ( Player orig ) { this . Handle = orig . _handle ; } } [ StructLayout ( LayoutKind . Explicit , Size = 1 ) ] internal struct RustBool { [ FieldOffset ( 0 ) ] private byte _inner ; public static implicit operator bool ( RustBool b ) { return b . _inner != 0 ; } public static implicit operator RustBool ( bool b ) { return new RustBool ( ) { _inner = b ? ( byte ) 1 : ( byte ) 0 , } ; } } [ StructLayout ( LayoutKind . Sequential ) ] internal unsafe struct RustOwnedString { public byte * Ptr ; public UIntPtr Length ; public UIntPtr Capacity ; } [ StructLayout ( LayoutKind . Sequential ) ] internal unsafe struct RawCsString { public char * Ptr ; public UIntPtr Length ; public RawCsString ( char * ptr , UIntPtr len ) { Ptr = ptr ; Length = len ; } public RawCsString ( char * ptr , int len ) { Ptr = ptr ; Length = ( UIntPtr ) len ; } }